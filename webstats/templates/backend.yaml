---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webstats-backend
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/instance: webstats-release
    app.kubernetes.io/name: webstats
    pod-security.kubernetes.io/audit: baseline
spec:
  replicas: {{.Values.backend.replicas}}
  selector:
    matchLabels:
      app.kubernetes.io/instance: webstats-release
      app.kubernetes.io/name: webstats
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: webstats-release
        app.kubernetes.io/name: webstats
    spec:
      serviceAccountName: webstats-svc-a
      imagePullSecrets:
      - name: regcred-bnb
      volumes:
      - name: geodb
        emptyDir: {}
{{ if .Values.s3.enabled }}
      initContainers:
      - name: fetch-geodb
        image: amazon/aws-cli:2.31.0
        command:
          - sh
          - -c
          - aws --endpoint-url {{ .Values.s3.bucket_endpoint }} s3 cp s3://{{ .Values.s3.bucket_name }}/{{ .Values.s3.dbname }} /geodb/GeoDB.mmdb
        volumeMounts:
        - name: geodb
          mountPath: /geodb
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.s3.secret_ref }}
                key: AWS_ACCESS_KEY_ID
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.s3.secret_ref }}
                key: AWS_SECRET_ACCESS_KEY
          - name: AWS_DEFAULT_REGION
            value: {{ .Values.s3.bucket_region }}
          - name: AWS_ENDPOINT_URL
            value: {{ .Values.s3.bucket_endpoint }}
{{ end }}
      containers:
      - name: webstats-backend
        image: "{{.Values.backend.image}}:{{.Values.backend.tag}}" 
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        ports:
        - containerPort: 3000
          name: backend-open
        envFrom:
        - secretRef:
            name: webstats-sm
        env:
        - name: GIN_MODE
          value: "release"
        - name: BACKEND_PORT
          value: "{{ .Values.backend.port }}"
        - name: PREFIX
          value: "{{ .Values.backend.prefix }}"
        securityContext:
          allowPrivilegeEscalation: false
{{ if .Values.backend.livenessProbe }}
        livenessProbe:
          httpGet:
            path: {{ .Values.backend.prefix }}/health
            port: {{ .Values.backend.port }}
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 2
{{ end }}
{{ if .Values.backend.startupProbe }}
        startupProbe:
          httpGet:
            path: {{ .Values.backend.prefix }}/health
            port: {{ .Values.backend.port }}
          failureThreshold: 3
          periodSeconds: 10
{{ end }}
{{ if .Values.s3.enabled }}
        volumeMounts:
        - name: geodb
          mountPath: /geodb
          readOnly: true
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: webstats-backend
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/instance: webstats-release
    app.kubernetes.io/name: webstats
spec:
  selector:
    app.kubernetes.io/instance: webstats-release
    app.kubernetes.io/name: webstats
  ports:
  - name: backend-open
    port: {{ .Values.backend.port }}
    protocol: TCP
    targetPort: backend-open